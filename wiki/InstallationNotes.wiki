#sidebar TableOfContents

= Editor Installation =

== Notes: ==

  * Let H is a host name, where we want to deploy the editor
  * Installation process is primarilly designed for a Debian-like linux, but it was tested for example on RedHat distribution after few editations as well.

Add a new user called "meditor" on H computer:
{{{sudo adduser meditor}}}

== Packages: ==

Add packages:

{{{sudo aptitude (apt-get) install mc vim aptitude acpi ssh rar sshfs wget curl openntpd ntpdate libtiff-tools imagemagick unzip htop}}}

== Database: ==

If the DB is not present, install Postgres
{{{
sudo su postgres && psql 
}}}
and run following commands:
{{{
CREATE ROLE meditor WITH PASSWORD 'samePassAsUnixPassForMeditor' LOGIN;
CREATE SCHEMA AUTHORIZATION meditor;
CREATE DATABASE meditor WITH OWNER meditor;
}}}
    * add (or ensure about their presence) the following lines to the configuration file of the postgres (_/etc/postgresql/${version}/main/pg_hba.conf_), for joining via http for user and database called "meditor"
{{{
#localhost
host	all 	meditor 	127.0.0.1/32		password
# MZK
host	all 	meditor 	195.113.155.0/24   	password
}}}
   * in file _/etc/postgresql/${version}/main/postgresql.conf_ uncomment the line "listen_addresses" and as a value set the strings "localhost" and ip address of H computer, separated by comma

   * restart postgres 
{{{
/etc/init.d/postgresql-${version} restart
}}}

== Install Tomcat: ==

{{{
wget http://websiterra.com/friends/apache/tomcat/tomcat-7/v7.0.25/bin/apache-tomcat-7.0.25.zip #(or newer)
unzip apache-tomcat-7.0.25.zip
}}}
   * Into
{{{
$CATALINA_HOME/bin/catalina.sh
}}} 
 ...add a line:
{{{
CATALINA_PID="$CATALINA_HOME/tomcat.pid"
}}} 
 place it after the command, which set a variable {{{CATALINA_HOME}}} in case it was not set yet (in version 7 Tomcat it is situated about line 100)

    * Into directory
{{{
CATALINA_HOME/lib/
}}} 
 copy the JDBC driver for Postgres (for example postgresql-${version}.jdbc4.jar)

== Environment Variable: ==

Into 
{{{
/home/meditor/.bashrc
}}} 
add the following lines (+/-):
{{{
export HISTSIZE=10000
export HISTFILESIZE=10000
export HISTCONTROL=ignoreboth
export JAVA_HOME='/home/meditor/install/jdk1.6.0_21/'
export CATALINA_HOME='/home/meditor/apache-tomcat-7.0.25/'
export CATALINA_OPTS='-server -Xmx512m -XX:MaxPermSize=128m -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n'
export PATH=$JAVA_HOME/bin:$PATH
export LC_ALL=cs_CZ.utf8
export PGCLIENTENCODING=UNICODE
}}}

== Image server: ==

   * create 
{{{
H:/home/meditor/.meditor
}}}

 * copy {{{resources/djatoka dir}}} and {{{resources/xml}}} into {{{H:/meditor/.meditor}}} (the source of copy is in SVN)
   * in war file: {{{H/user/.meditor/djatoka/dist/djatoka.war#/WEB-INF/classes/djatoka.properties}}} change password into database in {{{‘samePassAsUnixPassForMeditor}}} (mc can be used), eventually port of database too, if it is not default (5432’).

    * copy warko djatoky into Tomcat (into webapps)

Check that java is not using OpenJDK (java -version) but using JVM or oracle (HotSpot/ or JRockit). There should be equality between java, which is launched from  “$PATH” in shell and which is launched from {{{$JAVA_HOME/bin/java}}} (due to external processes as image conversion).


make a file _configuration.properties_ in H/user/.meditor and set the parameters, especially the way to import directory, way to images (internal imgserver), etc.

== DB data: ==

Add the directory META-INF into dirrectory where from will be deployted and there create a new file context.xml which includes:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<Context antiJARLocking="true" path="/meditor">
   <Resource name="jdbc/editor" auth="Container" type="javax.sql.DataSource"
           driverClassName="org.postgresql.Driver"
           maxActive="40" maxIdle="20" maxWait="7500"
           removeAbandoned="true" removeAbandonedTimeout="100" logAbandoned="true"
           username="meditor" password="samePassAsUnixPassForMeditor"
           url="jdbc:postgresql://localhost:5432/meditor" />
</Context> 

}}}

== Reverse proxy: ==

   * Install Apache (httpd on RedHat) and check there already are (if absent, install them) moduls (_/etc/apache2/mods-available_) _mod_proxy, mod-proxy-html_ a _mod_ssl_ and _mod_rewrite_ and activate it a2enmod (_/etc/apache2/mods-enabled_).

   * From any computer where is editor actually running, copy definitions of virtual guests for editor as such and for editor running in port 443 and change hostname in every places. Originalplacing is {{{/etc/apache/sites-available}}} on computer, where editor is running.
   * Add links for certificates into virtual guest definition for SSL.

   * Allow these two sites by a2ensite.

   * Restart Apache ({{{/etc/init.d/apache2ctl}}} restart or reload, if changes are only on the level of virtual network).

   * Revise the file {{{/etc/apache2/mods-enabled/proxy.conf}}} to be equal to the file on the computer, where was editor installed before.

   * Add/comment/change in {{{H:$CATALINA_HOME/conf/server.xml}}} for two conectors:
{{{
 <Connector port="8081" protocol="HTTP/1.1"
             proxyName="H" redirectPort="8443" proxyPort="80" />
<Connector port="8443"
 maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
 enableLookups="true" disableUploadTimeout="true"
 acceptCount="100" debug="0" scheme="https" secure="true"
 clientAuth="false" sslProtocol="TLS" SSLEnabled="true" SSLEngine="on"
 keystoreFile="PATH_TO_KEYSTORE"
 keystorePass="changeme" />
}}}
where H is hostname
{{{PATH_TO_KEYSTORE}}} is the way to the file, which ensue by following process:
{{{
$JAVA_HOME/bin/keytool -genkey -alias tomcat -keyalg RSA
}}}
and  “changeme” will be a password, which the command keytool asks for.

   * restart Tomcat (use script in {{{/home/meditor/.meditor/djatoka/bin/tomcat.sh}}}).

   * Delete unusable aplications from Tomcat as ROOT or docs. etc.

== Time server: ==
{{{
sudo vim /etc/openntpd/ntpd.conf 
}}}
(add tik.cesnet.cz and tak.cesnet.cz and restart the service 
{{{sudo /etc/init.d/openntpd restart}}})

== Outlying discs: ==

Definite discs, which are additing into {{{/etc/fstab}}}. Then enter to do that after restart of the computer in case sshfs (it means to {{{/etc/rc.local}}} add (+/- names and ways):
{{{
sudo -u meditor mount /home/meditor/input/monograph/
sudo -u meditor mount /home/meditor/input/periodical/
sudo -u meditor mount /home/meditor/imageserver/known/
sudo -u meditor mount /home/meditor/imageserver/unknown/
}}}

== Firewall: ==

Into the file 
{{{
/etc/init.d/firewall
}}}
add lines
{{{
       iptables -t filter -A INPUT -p tcp --dport 80 -j ACCEPT
       # Tomcat
       iptables -t filter -A INPUT -p tcp --dport 8000 -j ACCEPT
       # PostgreSLQ
       iptables -t filter -A INPUT -p tcp --dport 5432 -j ACCEPT
}}}
Port 8000 is neccesary for external debug. It means. If debug is not affected, it needs a comment and take into accound in parametres for JVM, when Tomcat is starded up.

Port for postgres will be opened (for connection to database in debug mod GWT from outer places).

For outer acces to ssh to H computer, is necesary to add public IP address into group FRIENDS:
{{{
   # home laptop
   iptables -t filter -A FRIENDS -s 84.42.234.102 -j ACCEPT
}}}

== Security: ==

Into the file {{{/etc/hosts.allow}}}
add:
{{{
ALL: localhost
ALL: 195.113.155.
sshd: 147.251.
}}}

When someone want to break safety from outer place (references in {{{/var/log/auth}}} or in log Apache), he can be banned in the file {{{/etc.hosts.deny}}}

For more security is possible to change in {{{/etc/ssh/sshd_config}}} element {{{PasswordAuthentication}}} from *_yes_* to *_no_* and allow to loging in with certificate.

== Launching after restart: ==

postgres and apache should ate lounched automaticly after restart, but Tomcat is not. So, is necessary to do:

create script {{{/etc/init.d/tomcat}}} and copy the content from the same location in the computer, where it is already installed, rewrite the ways, give the rights for launching and launch:
{{{
update-rc.d tomcat defaults
}}}

== Actualiyations: ==

As root launch a command {{{crontab -e}}} and add the line 
{{{
3 14 * * * (aptitude update && aptitude safe-upgrade -y) > /dev/null
}}}
